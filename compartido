# -*- coding: utf-8 -*-
import os

# Default values
verticalSize = 1
horizontalSize = 1
verticalShift = 0
horizontalShift = 0
newTransformationMatrixRight = ""
newTransformationMatrixLeft = ""


def save_transformation_matrix():
    """Function to save the transformation matrix."""
    print("Section \"InputClass\"")
    print("        Identifier \"TouchLeft\"")
    print("        MatchTag \"TouchLeft\"")
    print(f"        Option \"TransformationMatrix\" \"{newTransformationMatrixLeft}\"")
    print("        Driver \"libinput\"")
    print("EndSection\n")

    print("Section \"InputClass\"")
    print("        Identifier \"TouchRight\"")
    print("        MatchTag \"TouchRight\"")
    print(f"        Option \"TransformationMatrix\" \"{newTransformationMatrixRight}\"")
    print("        Driver \"libinput\"")
    print("EndSection")


def show_menu():
    """Displays the options menu."""
    print("==============================================")
    print("1.  Increase horizontally. Right")
    print("2.  Increase horizontally. Left")
    print("3.  Increase vertically. Down")
    print("4.  Increase vertically. Up")
    print("5.  Reset")
    print("6.  Save changes")
    print("7.  Change monitor")
    print("8.  Exit")
    print("==============================================")


def select_monitor():
    """Function to select the monitor and get the xinput ID."""
    global monitor, xinput_id
    error = -1
    while error != 0:
        try:
            print("Which monitor do you want to calibrate?")
            print("==============================================")
            print("1.  Right")
            print("2.  Left")
            print("==============================================")
            monitor = int(input("Enter choice: "))
            if monitor not in [1, 2]:
                raise ValueError("Invalid monitor selection.")
            
            xinput_id = int(input("What is the xinput ID for that touch device? "))
            error = 0
        except ValueError:
            print("Invalid input. Please try again.")
            error = -1


# Initialization of variables
selection = 0
step_size = 0.01
monitor = 0
xinput_id = 0

# Select monitor at the start
select_monitor()

# Main program loop
while selection != 8:
    show_menu()
    
    try:
        selection = int(input("Select an option: "))
        if selection not in range(1, 9):
            raise ValueError
    except ValueError:
        print("Invalid selection. Exiting...")
        selection = 8

    if selection == 1:
        horizontalSize += step_size
    elif selection == 2:
        horizontalSize += step_size
        horizontalShift -= step_size
    elif selection == 3:
        verticalSize += step_size
    elif selection == 4:
        verticalSize += step_size
        verticalShift -= step_size
    elif selection == 5:
        print("Resetting touch matrix: 1 0 0 0 1 0 0 0 1")
        verticalSize = 1
        horizontalSize = 1
        verticalShift = 0
        horizontalShift = 0
        command = f"xinput set-prop {xinput_id} 'Coordinate Transformation Matrix' 1 0 0 0 1 0 0 0 1"
        os.system(command)
    elif selection == 6:
        print("Save these values to /usr/share/X11/xorg.conf.d/10-touch-screen.conf")
        save_transformation_matrix()
    elif selection == 7:
        select_monitor()

    # Apply transformations
    if selection in [1, 2, 3, 4]:
        if monitor == 1:
            newTransformationMatrixRight = f"{horizontalSize / 2} 0 {horizontalShift + 0.5} 0 {verticalSize} {verticalShift} 0 0 1"
            command = f"xinput set-prop {xinput_id} 'Coordinate Transformation Matrix' {newTransformationMatrixRight}"
            print(f"Assigned matrix to touch device. Right: {newTransformationMatrixRight}")
            os.system(command)
        elif monitor == 2:
            newTransformationMatrixLeft = f"{horizontalSize / 2} 0 {horizontalShift} 0 {verticalSize} {verticalShift} 0 0 1"
            command = f"xinput set-prop {xinput_id} 'Coordinate Transformation Matrix' {newTransformationMatrixLeft}"
            print(f"Assigned matrix to touch device. Left: {newTransformationMatrixLeft}")
            os.system(command)
