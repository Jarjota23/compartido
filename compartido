# -*- coding: utf-8 -*-
import os
import tkinter as tk
from tkinter import messagebox
import tkinter.simpledialog

# Default values
verticalSize = 1
horizontalSize = 1
verticalShift = 0
horizontalShift = 0
newTransformationMatrixRight = ""
newTransformationMatrixLeft = ""

monitor = 0
xinput_id = 0

# Step size for adjustments
step_size = 0.01

# Tkinter root window
root = tk.Tk()
root.title("Touchscreen Calibration")
root.geometry("400x500")
root.configure(bg="#2c3e50")  # Background color

# Define styles for buttons and labels
button_style = {"bg": "#2980b9", "fg": "white", "font": ("Helvetica", 12), "relief": "raised", "bd": 2, "width": 25}
label_style = {"bg": "#2c3e50", "fg": "white", "font": ("Helvetica", 14)}

# Create a frame for organization
frame = tk.Frame(root, bg="#2c3e50")
frame.pack(pady=20)

# Function to enable all buttons after monitor and ID are set
def enable_buttons():
    if monitor != 0 and xinput_id != 0:
        for btn in adjustment_buttons:
            btn.config(state=tk.NORMAL)

# Function to save the transformation matrix.
def save_transformation_matrix():
    if monitor == 0 or xinput_id == 0:
        messagebox.showerror("Error", "Please select a monitor and enter the XInput ID first.")
        return

    messagebox.showinfo("Save", "Save these values to /usr/share/X11/xorg.conf.d/10-touch-screen.conf")
    print("Section \"InputClass\"")
    print("        Identifier \"TouchLeft\"")
    print("        MatchTag \"TouchLeft\"")
    print("        Option \"TransformationMatrix\" \""+str(newTransformationMatrixLeft)+"\"")
    print("        Driver \"libinput\"")
    print("EndSection\n")

    print("Section \"InputClass\"")
    print("        Identifier \"TouchRight\"")
    print("        MatchTag \"TouchRight\"")
    print("        Option \"TransformationMatrix\" \""+str(newTransformationMatrixRight)+"\"")
    print("        Driver \"libinput\"")
    print("EndSection")


# Reset touch matrix to default values.
def reset_values():
    if monitor == 0 or xinput_id == 0:
        messagebox.showerror("Error", "Please select a monitor and enter the XInput ID first.")
        return

    global verticalSize, horizontalSize, verticalShift, horizontalShift
    verticalSize = 1
    horizontalSize = 1
    verticalShift = 0
    horizontalShift = 0
    command = "xinput set-prop "+str(xinput_id)+" 'Coordinate Transformation Matrix' 1 0 0 0 1 0 0 0 1"
    os.system(command)
    messagebox.showinfo("Reset", "Touch matrix reset to default: 1 0 0 0 1 0 0 0 1")
    print("Touch matrix reset to default.")


# Apply transformation matrix based on current values.
def apply_transformation():
    global newTransformationMatrixRight, newTransformationMatrixLeft

    if monitor == 0 or xinput_id == 0:
        messagebox.showerror("Error", "Please select a monitor and enter the XInput ID first.")
        return

    if monitor == 1:
        print("----------------------------------------------------")

        newTransformationMatrixRight = str(horizontalSize / 2)+" 0 "+str(horizontalShift + 0.5)+" 0 "+str(verticalSize)+" "+str(verticalShift)+" 0 0 1"
        command = "xinput set-prop "+str(xinput_id)+" 'Coordinate Transformation Matrix' "+str(newTransformationMatrixRight)+""
        os.system(command)
        print("Assigned matrix to touch device. Right: "+str(newTransformationMatrixRight)+"")
    elif monitor == 2:
        print("----------------------------------------------------")
        newTransformationMatrixLeft = str(horizontalSize / 2)+" 0 "+str(horizontalShift)+" 0 "+str(verticalSize) +" "+str(verticalShift)+" 0 0 1"
        command = "xinput set-prop "+str(xinput_id)+" 'Coordinate Transformation Matrix' "+str(newTransformationMatrixLeft)+""
        os.system(command)
        print("Assigned matrix to touch device. Left: "+str(newTransformationMatrixLeft)+"")

def increase_horizontal_right():
    global horizontalSize
    horizontalSize += step_size
    apply_transformation()

def increase_horizontal_left():
    global horizontalSize, horizontalShift
    horizontalSize += step_size
    horizontalShift -= step_size
    apply_transformation()

def increase_vertical_down():
    global verticalSize
    verticalSize += step_size
    apply_transformation()

def increase_vertical_up():
    global verticalSize, verticalShift
    verticalSize += step_size
    verticalShift -= step_size
    apply_transformation()

# Function to change monitor and ask for XInput ID
def change_monitor(new_monitor):
    global monitor, xinput_id
    monitor = new_monitor

    # Get xinput_id from the user via dialog box
    try:
        xinput_id = int(tk.simpledialog.askstring("XInput ID", "Enter the xinput ID for the touch device:"))
        command = "xinput | grep Nuvoton | grep id="+str(xinput_id)
        exist_id = os.system(command)

        if exist_id != 0:
            messagebox.showerror("Error", "Invalid xinput ID, please try again.")
            xinput_id = 0
            change_monitor(new_monitor)

    except ValueError:
        messagebox.showerror("Error", "Invalid input, please enter a numeric xinput ID.")
        xinput_id = 0
        change_monitor(new_monitor)

    enable_buttons()

# Initially disable adjustment buttons
adjustment_buttons = []

# Add adjustment buttons
adjustment_buttons.append(tk.Button(frame, text="Increase Horizontal (Right)", command=increase_horizontal_right, **button_style, state=tk.DISABLED))
adjustment_buttons.append(tk.Button(frame, text="Increase Horizontal (Left)", command=increase_horizontal_left, **button_style, state=tk.DISABLED))
adjustment_buttons.append(tk.Button(frame, text="Increase Vertical (Down)", command=increase_vertical_down, **button_style, state=tk.DISABLED))
adjustment_buttons.append(tk.Button(frame, text="Increase Vertical (Up)", command=increase_vertical_up, **button_style, state=tk.DISABLED))
adjustment_buttons.append(tk.Button(frame, text="Reset", command=reset_values, **button_style, state=tk.DISABLED))
adjustment_buttons.append(tk.Button(frame, text="Save Changes", command=save_transformation_matrix, **button_style, state=tk.DISABLED))

# Pack adjustment buttons into the frame
for btn in adjustment_buttons:
    btn.pack(pady=5)

# Label and buttons for monitor selection
tk.Label(frame, text="Change Monitor", **label_style).pack(pady=10)
tk.Button(frame, text="Right Monitor", command=lambda: change_monitor(1), **button_style).pack(pady=5)
tk.Button(frame, text="Left Monitor", command=lambda: change_monitor(2), **button_style).pack(pady=5)

# Exit button at the bottom
tk.Button(root, text="Exit", command=root.quit, **button_style).pack(pady=20)

# Start the main loop
root.mainloop()




import subprocess
import re

# Función para ejecutar un comando y capturar su salida
def run_command(command):
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    return result.stdout

# Ejecutar xinput_calibrator --list y extraer el nombre del dispositivo
device_output = run_command("xinput_calibrator --list")
device = re.search(r'Device\s"(.+?)"', device_output).group(1)

# Reiniciar la matriz de transformación
subprocess.run(f'xinput set-prop "{device}" "Coordinate Transformation Matrix" 1 0 0 0 1 0 0 0 1', shell=True)

# Ejecutar xinput_calibrator y capturar la salida
out = run_command("xinput_calibrator")

# Extraer datos de calibración
device_name = re.search(r'MatchProduct"\s"(\d+)', out).group(1)
wtot = int(re.search(r'max_x=(\d+)', out).group(1))
htot = int(re.search(r'max_y=(\d+)', out).group(1))
minx = int(re.search(r'MinX"\s"(\d+)', out).group(1))
maxx = int(re.search(r'MaxX"\s"(\d+)', out).group(1))
miny = int(re.search(r'MinY"\s"(\d+)', out).group(1))
maxy = int(re.search(r'MaxY"\s"(\d+)', out).group(1))

# Calcular los valores de la matriz
wtouch = maxx - minx
htouch = maxy - miny
c0 = wtot / wtouch
c1 = -minx / wtouch
c2 = htot / htouch
c3 = -miny / htouch

# Crear la matriz de transformación
tf_matrix = f"{c0} 0 {c1} 0 {c2} {c3} 0 0 1"

# Aplicar la nueva matriz de transformación
subprocess.run(f'xinput set-prop "{device}" "Coordinate Transformation Matrix" {tf_matrix}', shell=True)

# Imprimir el contenido para hacer permanente la configuración
print(f"To make this permanent, save the following content under '/etc/X11/xorg.conf.d/98-screen-calibration.conf' or '/usr/share/X11/xorg.conf.d/98-screen-calibration.conf'")
print(f'Section "InputClass"')
print(f'    Identifier "calibration"')
print(f'    MatchProduct "{device_name}"')
print(f'    Option "TransformationMatrix" "{tf_matrix}"')
print('EndSection')

