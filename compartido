# -*- coding: utf-8 -*-
import os
import tkinter as tk
from tkinter import messagebox

# Default values
verticalSize = 1
horizontalSize = 1
verticalShift = 0
horizontalShift = 0
newTransformationMatrixRight = ""
newTransformationMatrixLeft = ""

monitor = 0
xinput_id = 0

# Step size for adjustments
step_size = 0.01

# Tkinter root window
root = tk.Tk()
root.title("Touchscreen Calibration")
root.geometry("400x400")

def save_transformation_matrix():
    """Function to save the transformation matrix."""
    messagebox.showinfo("Save", "Save these values to /usr/share/X11/xorg.conf.d/10-touch-screen.conf")
    print("Section \"InputClass\"")
    print("        Identifier \"TouchLeft\"")
    print("        MatchTag \"TouchLeft\"")
    print(f"        Option \"TransformationMatrix\" \"{newTransformationMatrixLeft}\"")
    print("        Driver \"libinput\"")
    print("EndSection\n")

    print("Section \"InputClass\"")
    print("        Identifier \"TouchRight\"")
    print("        MatchTag \"TouchRight\"")
    print(f"        Option \"TransformationMatrix\" \"{newTransformationMatrixRight}\"")
    print("        Driver \"libinput\"")
    print("EndSection")

def reset_values():
    """Reset touch matrix to default values."""
    global verticalSize, horizontalSize, verticalShift, horizontalShift
    verticalSize = 1
    horizontalSize = 1
    verticalShift = 0
    horizontalShift = 0
    command = f"xinput set-prop {xinput_id} 'Coordinate Transformation Matrix' 1 0 0 0 1 0 0 0 1"
    os.system(command)
    messagebox.showinfo("Reset", "Touch matrix reset to default: 1 0 0 0 1 0 0 0 1")
    print("Touch matrix reset to default.")

def apply_transformation():
    """Apply transformation matrix based on current values."""
    global newTransformationMatrixRight, newTransformationMatrixLeft

    if monitor == 1:
        newTransformationMatrixRight = f"{horizontalSize / 2} 0 {horizontalShift + 0.5} 0 {verticalSize} {verticalShift} 0 0 1"
        command = f"xinput set-prop {xinput_id} 'Coordinate Transformation Matrix' {newTransformationMatrixRight}"
        os.system(command)
        print(f"Assigned matrix to touch device. Right: {newTransformationMatrixRight}")
    elif monitor == 2:
        newTransformationMatrixLeft = f"{horizontalSize / 2} 0 {horizontalShift} 0 {verticalSize} {verticalShift} 0 0 1"
        command = f"xinput set-prop {xinput_id} 'Coordinate Transformation Matrix' {newTransformationMatrixLeft}"
        os.system(command)
        print(f"Assigned matrix to touch device. Left: {newTransformationMatrixLeft}")

def increase_horizontal_right():
    global horizontalSize
    horizontalSize += step_size
    apply_transformation()

def increase_horizontal_left():
    global horizontalSize, horizontalShift
    horizontalSize += step_size
    horizontalShift -= step_size
    apply_transformation()

def increase_vertical_down():
    global verticalSize
    verticalSize += step_size
    apply_transformation()

def increase_vertical_up():
    global verticalSize, verticalShift
    verticalSize += step_size
    verticalShift -= step_size
    apply_transformation()

def change_monitor(new_monitor):
    global monitor, xinput_id
    monitor = new_monitor
    # Get xinput_id from the user via dialog box
    xinput_id = int(tk.simpledialog.askstring("XInput ID", "Enter the xinput ID for the touch device:"))

# Button functions mapped to the actions
tk.Button(root, text="Increase Horizontal (Right)", command=increase_horizontal_right).pack(pady=5)
tk.Button(root, text="Increase Horizontal (Left)", command=increase_horizontal_left).pack(pady=5)
tk.Button(root, text="Increase Vertical (Down)", command=increase_vertical_down).pack(pady=5)
tk.Button(root, text="Increase Vertical (Up)", command=increase_vertical_up).pack(pady=5)
tk.Button(root, text="Reset", command=reset_values).pack(pady=5)
tk.Button(root, text="Save Changes", command=save_transformation_matrix).pack(pady=5)

tk.Label(root, text="Change Monitor").pack(pady=10)
tk.Button(root, text="Right Monitor", command=lambda: change_monitor(1)).pack(pady=5)
tk.Button(root, text="Left Monitor", command=lambda: change_monitor(2)).pack(pady=5)

tk.Button(root, text="Exit", command=root.quit).pack(pady=20)

# Start the main loop
root.mainloop()
